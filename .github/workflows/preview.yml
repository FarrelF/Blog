name: Testing Site
on: 
  pull_request:
    branches:
      - drafts
      - main
    paths-ignore:
      - "**/README.md"
      - "**/LICENSE"
      - "**/LICENSE*"
      - "**/CONTRIBUTING.md"
      - "**/.gitignore"
      - "**/netlify.toml"
      - "config/development/**"
      - "**/archetypes/**"

jobs:
  build:
    name: Build (Preview)
    runs-on: ubuntu-22.04
    env:
      TZ: Asia/Jakarta
      HUGO_ENV: staging

    steps:
    - name: Checkout the Code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up APT Mirror
      # GitHub Actions APT proxy is super unstable
      # See: https://github.com/actions/runner-images/issues/7048
      run: |
        printf 'http://azure.archive.ubuntu.com/ubuntu	priority:1\n' | sudo tee /etc/apt/mirrors.txt
        curl http://mirrors.ubuntu.com/mirrors.txt | sudo tee --append /etc/apt/mirrors.txt
        sudo sed -i 's/http:\/\/azure.archive.ubuntu.com\/ubuntu\//mirror+file:\/etc\/apt\/mirrors.txt/' /etc/apt/sources.list

    - name: Install All Locales and Other Packages
      run: |
        sudo sh -c 'apt update; apt install -y locales locales-all pigz'
        sudo update-locale LANG=C.UTF-8 LC_MESSAGES=POSIX
        sudo ln -sf /usr/share/zoneinfo/${TZ} /etc/localtime

    - name: Setup Hugo Extended
      uses: peaceiris/actions-hugo@v2
      with:
        hugo-version: latest
        extended: true
    #- name: Install and Set up Hugo Extended
    #  run: |
    #    HUGO_VERSION="$(curl -s https://api.github.com/repos/gohugoio/hugo/releases/latest | grep tag_name | cut -d 'v' -f2 | cut -d'"' -f1)"
    #    cd /tmp/
    #    wget https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_Linux-64bit.tar.gz
    #    tar -xzf hugo_extended_${HUGO_VERSION}_Linux-64bit.tar.gz
    #    chmod +x hugo
    #    sudo -- sh -c 'mv hugo /usr/local/bin/; chown root:root /usr/local/bin/hugo'
    #    rm hugo_extended_${HUGO_VERSION}_Linux-64bit.tar.gz LICENSE README.md
    #    cd ${GITHUB_WORKSPACE}
    #    which hugo && hugo version
    #    # find ./content -type f -exec file {} \; | awk -F: '{ if ($2 ~/[Ii]mage|EPS/) print $1}' > Images.list
    #    # sha256sum $(cat Images.list) > Images.hash.list
    #    # git ls-tree -rtl HEAD:layouts --full-tree > layouts-tree.hash

    - name: Setup Hugo Resources Cache
      uses: actions/cache@v4
      with:
        path: ./resources
        key: v2-5-hugo-preview
        restore-keys: | 
          - v2-5-hugo-preview

    - name: Setup Hugo Modules Cache
      uses: actions/cache@v4
      with:
        path: /tmp/hugo_cache_runner
        key: ${{ runner.os }}-hugo-modules-preview-${{ hashFiles('**/go.sum') }}
        restore-keys: | 
          - ${{ runner.os }}-hugo-modules-preview-${{ hashFiles('**/go.sum') }}

    - name: Building the Static Web (Preview)
      run: |
        rm -rf static/*.txt static/*.xml static/google*.html static/CNAME static/_redirects
        hugo --gc --buildFuture --environment staging -b https://deploy-preview.farrel.franqois.id
        printf "SHORT_SHA=%s\n" ${GITHUB_SHA::7} >> $GITHUB_ENV

    - name: Compressing Static Web Files
      run: |
        # pigz -km -9 $(find public -iname '*.html' -o -iname '*.css' -o -iname '*.js' -o -iname '*.json' -o -iname '*.xml' -o -iname '*.svg' -o -iname '*.txt')
        # brotli -Zn $(find public -iname '*.html' -o -iname '*.css' -o -iname '*.js' -o -iname '*.json' -o -iname '*.xml' -o -iname '*.svg' -o -iname '*.txt')
        tar cvf - ./public | pigz -9 > files.tar.gz

    - name: Upload Output File to Artifact
      uses: actions/upload-artifact@v4
      with:
        name: preview-build-result-${{ env.SHORT_SHA }}
        path: files.tar.gz
        retention-days: 1

  deploy_to_bunny_net:
    name: Deploy to Bunny Storage (Preview)
    needs: build
    runs-on: ubuntu-22.04
    steps:
    - name: Setup Environment Variable
      run: printf "SHORT_SHA=%s\n" ${GITHUB_SHA::7} >> $GITHUB_ENV
    - name: Download Output File from Artifact
      uses: actions/download-artifact@v4
      with:
        name: preview-build-result-${{ env.SHORT_SHA }}

    - name: Decompressing Files
      run: |
        tar -xvzf files.tar.gz

    - name: Deploying to Bunny Storage
      uses: ayeressian/bunnycdn-storage-deploy@v2.2.3
      with:
        source: 'public'
        destination: ''
        storageZoneName: "${{ secrets.BUNNY_PREVIEW_STORAGE_USERNAME }}"
        storagePassword: "${{ secrets.BUNNY_PREVIEW_STORAGE_PASSWORD }}"
        accessKey: "${{ secrets.BUNNY_API_KEY }}"
        pullZoneId: "${{ secrets.BUNNY_PREVIEW_PULLZONE_ID }}"
        upload: "true"
        remove: "true"
        purgePullZone: "true"

  deploy_to_tebi-s3:
    name: Deploy to Tebi S3 Storage (Preview)
    needs: build
    runs-on: ubuntu-22.04
    steps:
    - name: Setup Environment Variable
      run: printf "SHORT_SHA=%s\n" ${GITHUB_SHA::7} >> $GITHUB_ENV
    - name: Download Output File from Artifact
      uses: actions/download-artifact@v4
      with:
        name: preview-build-result-${{ env.SHORT_SHA }}

    - name: Decompressing Files
      run: |
        tar -xvzf files.tar.gz

    - name: Installing and Configuring RClone
      run: |
        curl https://rclone.org/install.sh | sudo bash
        mkdir -p ${HOME}/.config/rclone
        echo "${{ secrets.RCLONE_CONFIG }}" > ${HOME}/.config/rclone/rclone.conf

    - name: Deploying to S3 Storage
      env:
        RCLONE_CONFIG_PASS: ${{ secrets.RCLONE_CONFIG_PASS }}
        S3_SERVICE: tebi-s3
      run: |
        rclone sync -v -P --stats-one-line --checksum --transfers=64 --checkers=64 --fast-list ./public ${S3_SERVICE}:/${{ secrets.S3_PREVIEW_STORAGE_BUCKET }}
