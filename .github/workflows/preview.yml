name: Testing Site
on: 
  pull_request:
    branches:
      - drafts
      - main
    paths-ignore:
      - "**/README.md"
      - "**/LICENSE"
      - "**/LICENSE*"
      - "**/CONTRIBUTING.md"
      - "**/.gitignore"
      - "**/netlify.toml"

jobs:
  build:
    name: Build (Preview)
    runs-on: ubuntu-20.04
    env:
      TZ: Asia/Jakarta
      HUGO_ENV: staging

    steps:
    - name: Checkout the Code
      uses: actions/checkout@v2
      with:
        fetch-depth: '0'
        submodules: 'true'

    - name: Install and Set up Locales and Other Packages
      run: |
        case "$(curl -s --max-time 3 -I http://azure.archive.ubuntu.com | sed 's/^[^ ]*  *\([0-9]\).*/\1/; 1q')" in
          [23]) echo "The Repository HTTP Server is up"
                if nc -zw3 azure.archive.ubuntu.com 80; then
                  echo "The Repository Server has been connected successfully"
                else
                  echo "The Repository server is down, changing the Repository Server. Please wait....."
                  sudo sed -i 's|http://azure.archive.ubuntu.com/ubuntu/|https://mirror.b-cdn.net/ubuntu/|g' /etc/apt/sources.list
                  sudo sed -i 's|http://security.ubuntu.com/ubuntu|https://mirror.b-cdn.net/ubuntu/|g' /etc/apt/sources.list
                  sudo sed -i 's|http://ppa.launchpad.net|https://mirrorppa.b-cdn.net|g' /etc/apt/sources.list.d/*.list
                fi;;
          *) echo "The Repository HTTP Server is down, changing the Repository Server. Please wait....."
             sudo sed -i 's|http://azure.archive.ubuntu.com/ubuntu/|https://mirror.b-cdn.net/ubuntu/|g' /etc/apt/sources.list
             sudo sed -i 's|http://security.ubuntu.com/ubuntu|https://mirror.b-cdn.net/ubuntu/|g' /etc/apt/sources.list
             sudo sed -i 's|http://ppa.launchpad.net|https://mirrorppa.b-cdn.net|g' /etc/apt/sources.list.d/*.list;;
        esac
        sudo apt update
        sudo apt install locales locales-all pigz
        sudo sed -i 's/id_ID\s.*$/id_ID id_ID.utf8/g' /usr/share/locale/locale.alias
        sudo sed -i 's/# id_ID\.UTF-8/id_ID\.UTF-8/' /etc/locale.gen
        sudo update-locale LANG=C.UTF-8 LC_MESSAGES=POSIX
        DEBIAN_FRONTEND=noninteractive sudo -E dpkg-reconfigure locales
        sudo ln -sf /usr/share/zoneinfo/Asia/Jakarta /etc/localtime
    
    - name: Install and Set up Hugo Extended
      run: |
        HUGO_VERSION="$(curl -s https://api.github.com/repos/gohugoio/hugo/releases/latest | grep tag_name | cut -d 'v' -f2 | cut -d'"' -f1)"
        cd /tmp/
        wget https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_Linux-64bit.tar.gz
        tar -xzf hugo_extended_${HUGO_VERSION}_Linux-64bit.tar.gz
        chmod +x hugo
        sudo mv hugo /usr/local/bin/ && sudo chown root:root /usr/local/bin/hugo
        cd ${GITHUB_WORKSPACE}
        which hugo && hugo version
        git ls-tree -rtl HEAD:content/post --full-tree > post-tree.hash
    
    - name: Set up Hugo Resources Cache
      uses: actions/cache@v2
      with:
        path: |
          ./cache
          ./resources
        key: v1-hugo-preview-${{ hashFiles('**/post-tree.hash') }}-${{ hashFiles('**/config.yaml') }}
        restore-keys: | 
          - v1-hugo-preview-${{ hashFiles('**/post-tree.hash') }}-${{ hashFiles('**/config.yaml') }}
          - v1-hugo-preview-${{ hashFiles('**/post-tree.hash') }}-

    - name: Building the Blog HTML (Preview)
      run: |
        rm -rf static/*.txt static/*.xml static/google*.html static/CNAME static/_redirects
        mv static/robots_preview static/robots.txt
        hugo --gc --minify --enableGitInfo --buildFuture --config ${PWD}/config.preview.yaml --cacheDir ${PWD}/cache -b https://deploy-preview.farrel.franqois.id
        tar cvf - public | pigz -9 > files.tar.gz

    - name: Upload Output File to Artifact
      uses: actions/upload-artifact@v2
      with:
        name: site-outputs
        path: files.tar.gz
        retention-days: 1
  
  deploy:
    name: Deploy (Preview)
    needs: build
    runs-on: ubuntu-20.04
    steps:
    - name: Download Output File from Artifact
      uses: actions/download-artifact@v2
      with:
        name: site-outputs

    - name: Decompressing Files
      run: |
        tar -xvzf files.tar.gz

    - name: Deploying to FTP(s) Storage
      uses: SamKirkland/FTP-Deploy-Action@4.0.0
      with:
        server: storage.bunnycdn.com
        username: ${{ secrets.BUNNY_PREVIEW_STORAGE_USERNAME }}
        password: ${{ secrets.BUNNY_PREVIEW_STORAGE_PASSWORD }}
        port: 21
        log-level: verbose
        local-dir: ./public/
        server-dir: /${{ secrets.BUNNY_PREVIEW_STORAGE_USERNAME }}/

    - name: Purging Bunny.net CDN Cache
      run: |
        RESPONSE_CODE=$(curl -so /dev/null -I -w "%{http_code}" -X POST --url https://api.bunny.net/pullzone/${{ secrets.BUNNY_PREVIEW_PULLZONE_ID }}/purgeCache -H "AccessKey: ${{ secrets.BUNNY_API_KEY }}" -H "content-length: 0" | head -n 1 | cut -d$' ' -f2)
        if [ "${RESPONSE_CODE}" -gt 299 ]; then
          echo "Failed to sending purge request, purge it by yourself!"
        else
          echo "Sending Purge Request is Successfully, the CDN Cache will be purged soon!"
        fi
        echo "Status Code: ${RESPONSE_CODE}"
